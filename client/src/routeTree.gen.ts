/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as PasswordresetImport } from './routes/password_reset'
import { Route as LoginImport } from './routes/login'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as StaffStaffImport } from './routes/staff/_staff'
import { Route as UserUserProfileImport } from './routes/user/_user.profile'
import { Route as UserUserDashboardImport } from './routes/user/_user.dashboard'
import { Route as StaffStaffDashboardImport } from './routes/staff/_staff.dashboard'

// Create Virtual Routes

const StaffImport = createFileRoute('/staff')()

// Create/Update Routes

const StaffRoute = StaffImport.update({
  id: '/staff',
  path: '/staff',
  getParentRoute: () => rootRoute,
} as any)

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const PasswordresetRoute = PasswordresetImport.update({
  id: '/password_reset',
  path: '/password_reset',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const StaffStaffRoute = StaffStaffImport.update({
  id: '/_staff',
  getParentRoute: () => StaffRoute,
} as any)

const UserUserProfileRoute = UserUserProfileImport.update({
  id: '/user/_user/profile',
  path: '/user/profile',
  getParentRoute: () => rootRoute,
} as any)

const UserUserDashboardRoute = UserUserDashboardImport.update({
  id: '/user/_user/dashboard',
  path: '/user/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const StaffStaffDashboardRoute = StaffStaffDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => StaffStaffRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/password_reset': {
      id: '/password_reset'
      path: '/password_reset'
      fullPath: '/password_reset'
      preLoaderRoute: typeof PasswordresetImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/staff': {
      id: '/staff'
      path: '/staff'
      fullPath: '/staff'
      preLoaderRoute: typeof StaffImport
      parentRoute: typeof rootRoute
    }
    '/staff/_staff': {
      id: '/staff/_staff'
      path: '/staff'
      fullPath: '/staff'
      preLoaderRoute: typeof StaffStaffImport
      parentRoute: typeof StaffRoute
    }
    '/staff/_staff/dashboard': {
      id: '/staff/_staff/dashboard'
      path: '/dashboard'
      fullPath: '/staff/dashboard'
      preLoaderRoute: typeof StaffStaffDashboardImport
      parentRoute: typeof StaffStaffImport
    }
    '/user/_user/dashboard': {
      id: '/user/_user/dashboard'
      path: '/user/dashboard'
      fullPath: '/user/dashboard'
      preLoaderRoute: typeof UserUserDashboardImport
      parentRoute: typeof rootRoute
    }
    '/user/_user/profile': {
      id: '/user/_user/profile'
      path: '/user/profile'
      fullPath: '/user/profile'
      preLoaderRoute: typeof UserUserProfileImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface StaffStaffRouteChildren {
  StaffStaffDashboardRoute: typeof StaffStaffDashboardRoute
}

const StaffStaffRouteChildren: StaffStaffRouteChildren = {
  StaffStaffDashboardRoute: StaffStaffDashboardRoute,
}

const StaffStaffRouteWithChildren = StaffStaffRoute._addFileChildren(
  StaffStaffRouteChildren,
)

interface StaffRouteChildren {
  StaffStaffRoute: typeof StaffStaffRouteWithChildren
}

const StaffRouteChildren: StaffRouteChildren = {
  StaffStaffRoute: StaffStaffRouteWithChildren,
}

const StaffRouteWithChildren = StaffRoute._addFileChildren(StaffRouteChildren)

export interface FileRoutesByFullPath {
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/password_reset': typeof PasswordresetRoute
  '/signup': typeof SignupRoute
  '/staff': typeof StaffStaffRouteWithChildren
  '/staff/dashboard': typeof StaffStaffDashboardRoute
  '/user/dashboard': typeof UserUserDashboardRoute
  '/user/profile': typeof UserUserProfileRoute
}

export interface FileRoutesByTo {
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/password_reset': typeof PasswordresetRoute
  '/signup': typeof SignupRoute
  '/staff': typeof StaffStaffRouteWithChildren
  '/staff/dashboard': typeof StaffStaffDashboardRoute
  '/user/dashboard': typeof UserUserDashboardRoute
  '/user/profile': typeof UserUserProfileRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/password_reset': typeof PasswordresetRoute
  '/signup': typeof SignupRoute
  '/staff': typeof StaffRouteWithChildren
  '/staff/_staff': typeof StaffStaffRouteWithChildren
  '/staff/_staff/dashboard': typeof StaffStaffDashboardRoute
  '/user/_user/dashboard': typeof UserUserDashboardRoute
  '/user/_user/profile': typeof UserUserProfileRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/dashboard'
    | '/login'
    | '/password_reset'
    | '/signup'
    | '/staff'
    | '/staff/dashboard'
    | '/user/dashboard'
    | '/user/profile'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/dashboard'
    | '/login'
    | '/password_reset'
    | '/signup'
    | '/staff'
    | '/staff/dashboard'
    | '/user/dashboard'
    | '/user/profile'
  id:
    | '__root__'
    | '/dashboard'
    | '/login'
    | '/password_reset'
    | '/signup'
    | '/staff'
    | '/staff/_staff'
    | '/staff/_staff/dashboard'
    | '/user/_user/dashboard'
    | '/user/_user/profile'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  DashboardRoute: typeof DashboardRoute
  LoginRoute: typeof LoginRoute
  PasswordresetRoute: typeof PasswordresetRoute
  SignupRoute: typeof SignupRoute
  StaffRoute: typeof StaffRouteWithChildren
  UserUserDashboardRoute: typeof UserUserDashboardRoute
  UserUserProfileRoute: typeof UserUserProfileRoute
}

const rootRouteChildren: RootRouteChildren = {
  DashboardRoute: DashboardRoute,
  LoginRoute: LoginRoute,
  PasswordresetRoute: PasswordresetRoute,
  SignupRoute: SignupRoute,
  StaffRoute: StaffRouteWithChildren,
  UserUserDashboardRoute: UserUserDashboardRoute,
  UserUserProfileRoute: UserUserProfileRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/dashboard",
        "/login",
        "/password_reset",
        "/signup",
        "/staff",
        "/user/_user/dashboard",
        "/user/_user/profile"
      ]
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/password_reset": {
      "filePath": "password_reset.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/staff": {
      "filePath": "staff",
      "children": [
        "/staff/_staff"
      ]
    },
    "/staff/_staff": {
      "filePath": "staff/_staff.tsx",
      "parent": "/staff",
      "children": [
        "/staff/_staff/dashboard"
      ]
    },
    "/staff/_staff/dashboard": {
      "filePath": "staff/_staff.dashboard.tsx",
      "parent": "/staff/_staff"
    },
    "/user/_user/dashboard": {
      "filePath": "user/_user.dashboard.tsx"
    },
    "/user/_user/profile": {
      "filePath": "user/_user.profile.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
